#(metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"])
#(i.e. withinSS + betweenSS/(withinDF + betweenSS))
#because, compared to the original regression, one more DF is lost when performing anova on the residuals themselves
#with respect to sample (which is not the original regression).
#originalResidVar <- (metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"])
originalResidVar <- metadata(experiment)$modtInfo[,"residSE"]^2
metadata(experiment)$modtInfo
metadata(experiment)$modtInfo[,"betaCoefSE"]
head(metadata(experiment)$modtInfo[,"betaCoefSE"])
head(originalResidVar)
#Record the sqrt(var.hat(y))/sqrt(var.hat*(y)) where var.hat(y) is the original estimate of the variance
#of y (or the total error in the regression model) and var.hat*(y) is the posterior estimate of this
#variance after shrinking the biological variance.
changeInSE <- sqrt(newResidVar/originalResidVar)
newSE <- changeInSE*metadata(experiment)$modtInfo[,"betaCoefSE"]
resultsRevised <- metadata(experiment)$modtInfo[,"betaCoef"]/newSE
summary(changeInSE)
summary(newResidVar/originalResidVar)
summary(metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"])
summary(modBioVar)
summary(modBioVar$var.post)
nStar
metadata(experiment)$modtInfo[,"modBioVarPriorDF"]
kStar
nStar <- metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"] + 1
kStar <- metadata(experiment)$modtInfo[,"betweenDF"]  + 1
tauSquare <- metadata(experiment)$modtInfo[,"withinSS"]/metadata(experiment)$modtInfo[,"withinDF"]
sigmaSquare <- metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"]
newResidVar <- ((nStar - kStar)/(nStar - 1))*tauSquare + ((kStar - 1)/(nStar - 1))*sigmaSquare
#For reference, the original MSE (the mean squared residual) before shrinkage of biological variance.
#This is not the same as
#(metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"])
#(i.e. withinSS + betweenSS/(withinDF + betweenSS))
#because, compared to the original regression, one more DF is lost when performing anova on the residuals themselves
#with respect to sample (which is not the original regression).
#originalResidVar <- (metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"])
originalResidVar <- metadata(experiment)$modtInfo[,"residSE"]^2
head(newResidVar)
head(originalResidVar)
totalSS <- metadata(experiment)$modtInfo[,"withinSS"] + metadata(experiment)$modtInfo[,"betweenSS"]
head(totalSS)
head(nStar)
head(kStar)
head(totalSS/nStar)
head(originalResidVar)
head((metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"]+1))
head((metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"]+1))
#For reference, the original MSE (the mean squared residual) before shrinkage of biological variance.
#This is not the same as
#(metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"])
#(i.e. withinSS + betweenSS/(withinDF + betweenSS))
#because, compared to the original regression, one more DF is lost when performing anova on the residuals themselves
#with respect to sample (which is not the original regression).
#Instead, it's equal to withinSS + betweenSS/(withinDF + betweenSS+1).
#originalResidVar <- (metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"]+1)
originalResidVar <- metadata(experiment)$modtInfo[,"residSE"]^2
head(originalResidVar)
nStar <- metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"] + 1
kStar <- metadata(experiment)$modtInfo[,"betweenDF"] + 1
tauSquare <- metadata(experiment)$modtInfo[,"withinSS"]/metadata(experiment)$modtInfo[,"withinDF"]
sigmaSquare <- metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"]
newResidVar <- ((nStar - kStar)/(nStar - 1))*tauSquare + ((kStar - 1)/(nStar - 1))*sigmaSquare
head(newResidVar)
newResidVar <- ((nStar - kStar)/(nStar ))*tauSquare + ((kStar - 1)/(nStar ))*sigmaSquare
head(newResidVar)
head(nStar)
#Shrink the biological variance
modBioVar <- squeezeVar(var=metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"],
df = metadata(experiment)$modtInfo[,"betweenDF"])
modtInfo <- cbind(metadata(experiment)$modtInfo,
rep(modBioVar$df.prior, nrow(metadata(experiment)$modtInfo)),
modBioVar$var.post)
colnames(modtInfo) <-  c(colnames(metadata(experiment)$modtInfo), "modBioVarPriorDF", "modBioVar")
metadata(experiment)$modtInfo <- modtInfo #Temporary
#Go through each region, recalculate the standard error (assumes lm), get the new t statistic.
#The size of the regression model or number of coefficients (p) has already been subtracted off
#from withinDF by getSingleRegionEffect(). Thus, the p doesn't need to be accounted for below.
nStar <- metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"] + 1
kStar <- metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"] + 1
tauSquare <- metadata(experiment)$modtInfo[,"withinSS"]/metadata(experiment)$modtInfo[,"withinDF"]
#sigmaSquare <- metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"]
sigmaSquare <- modBioVar$var.post
newResidVar <- ((nStar - kStar)/(nStar - 1))*tauSquare + ((kStar - 1)/(nStar - 1))*sigmaSquare #Number of regression coefficients, p, already accounted for by "withinDF" above.
#For reference, the original MSE (the mean squared residual) before shrinkage of biological variance.
#This is not the same as
#(metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"])
#(i.e. withinSS + betweenSS/(withinDF + betweenSS))
#because, compared to the original regression, one more DF is lost when performing anova on the residuals themselves
#with respect to sample (which is not the original regression).
#Instead, it's equal to withinSS + betweenSS/(withinDF + betweenSS + 1).
#originalResidVar <- (metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"]+1)
originalResidVar <- metadata(experiment)$modtInfo[,"residSE"]^2
summary(newResidVar/originalResidVar)
#Record the sqrt(var.hat(y))/sqrt(var.hat*(y)) where var.hat(y) is the original estimate of the variance
#of y (or the total error in the regression model) and var.hat*(y) is the posterior estimate of this
#variance after shrinking the biological variance.
changeInSE <- sqrt(newResidVar/originalResidVar)
newSE <- changeInSE*metadata(experiment)$modtInfo[,"betaCoefSE"]
resultsRevised <- metadata(experiment)$modtInfo[,"betaCoef"]/newSE
summary(resultsRevised/metadata(experiment)$modtInfo[,"tValue"])
summary(resultsRevised/metadata(experiment)$regions$tValue)
summary(metadata(experiment)$regions$tValue/resultsRevised)
summary(changeInSE)
summary(metadata(experiment)$regions$tValue/metadata(experiment)$regions$modtValueFromBioVar)
summary(metadata(experiment)$regions$modtValueFromBioVar/metadata(experiment)$regions$tValue)
head(metadata(experiment)$regions$tValue)
head(metadata(experiment)$modtInfo[,"betaCoef"]/metadata(experiment)$modtInfo[,"betaCoefSE"])
roxygen2::roxygenise()
rm(list=ls())
load("/homes6/mquinn/chipseqRScripts/data_peaks_simulated_DB_GSE57632.rda")
load("/homes6/mquinn/chipseqRScripts/permutation_test_balanced_results_simulated_DB_GSE57632.rda")
candidateRegions <- metadata(experiment)$regions
cell_line <- factor(c(1,2,1,2))
status <- factor(c("Treatment",  "Treatment", "Simulated", "Simulated"))
status <- relevel(status, ref=toString(unique(status)[1]))
#fakeVar <- c(1.25, 1.50, 1.75, 2.00)
sampleSheet <- data.frame(cell_line, status)
blacklist <- read.table('/homes6/mquinn/chipseqRScripts/hg19-blacklist.v2.bed',
header=FALSE,sep='\t',stringsAsFactors=F)
blacklist <- GRanges(blacklist$V1,IRanges(blacklist$V2,blacklist$V3),group=blacklist$V4)
library(permBind)
experiment <- formatExperiment(assay=simDat, rowRanges=rowRanges(data),
sampleSheet=sampleSheet, blacklist=blacklist,
expCondition = "status", block = "cell_line")
#experiment <- formatExperiment(assay=simDat, rowRanges=rowRanges(data),
#                               sampleSheet=sampleSheet, blacklist=blacklist,
#                               expCondition = "status", block = "cell_line", covariates=("fakeVar"))
experiment
head(assay(experiment))
experiment <- getRegions(experiment, lower=0.015, upper=0.985, thresholdType="percentile", minWidth = median(width(rowRanges(experiment))) + 1, maxGap=600)
experiment <- transformCounts(experiment)
permutations <- getPermutations(experiment, permutationType = "balanced")
experiment <- permutationTest(experiment, permutations, effectType="two-sided", includeBetas = T, numCores = 4, verbose = T)
#Shrink the biological variance
modBioVar <- squeezeVar(var=metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"],
df = metadata(experiment)$modtInfo[,"betweenDF"])
modtInfo <- cbind(metadata(experiment)$modtInfo,
rep(modBioVar$df.prior, nrow(metadata(experiment)$modtInfo)),
modBioVar$var.post)
colnames(modtInfo) <-  c(colnames(metadata(experiment)$modtInfo), "modBioVarPriorDF", "modBioVar")
metadata(experiment)$modtInfo <- modtInfo #Temporary
#Go through each region, recalculate the standard error (assumes lm), get the new t statistic.
#The size of the regression model or number of coefficients (p) has already been subtracted off
#from withinDF by getSingleRegionEffect(). Thus, the p doesn't need to be accounted for below.
nStar <- metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"] + 1
kStar <- metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"] + 1
tauSquare <- metadata(experiment)$modtInfo[,"withinSS"]/metadata(experiment)$modtInfo[,"withinDF"]
#sigmaSquare <- metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"]
sigmaSquare <- modBioVar$var.post
newResidVar <- ((nStar - kStar)/(nStar - 1))*tauSquare + ((kStar - 1)/(nStar - 1))*sigmaSquare #Number of regression coefficients, p, already accounted for by "withinDF" above.
#Record the sqrt(var.hat(y))/sqrt(var.hat*(y)) where var.hat(y) is the original estimate of the variance
#of y (or the total error in the regression model) and var.hat*(y) is the posterior estimate of this
#variance after shrinking the biological variance.
changeInSE <- sqrt(newResidVar/originalResidVar)
#For reference, the original MSE (the mean squared residual) before shrinkage of biological variance.
#This is not the same as
#(metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"])
#(i.e. withinSS + betweenSS/(withinDF + betweenSS))
#because, compared to the original regression, one more DF is lost when performing anova on the residuals themselves
#with respect to sample (which is not the original regression).
#Instead, it's equal to withinSS + betweenSS/(withinDF + betweenSS + 1).
#originalResidVar <- (metadata(experiment)$modtInfo[,"withinSS"] +  metadata(experiment)$modtInfo[,"betweenSS"])/( metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"]+1)
originalResidVar <- metadata(experiment)$modtInfo[,"residSE"]^2
#Record the sqrt(var.hat(y))/sqrt(var.hat*(y)) where var.hat(y) is the original estimate of the variance
#of y (or the total error in the regression model) and var.hat*(y) is the posterior estimate of this
#variance after shrinking the biological variance.
changeInSE <- sqrt(newResidVar/originalResidVar)
summary(changeInSE)
newSE <- changeInSE*metadata(experiment)$modtInfo[,"betaCoefSE"]
resultsRevised <- metadata(experiment)$modtInfo[,"betaCoef"]/newSE
summary(metadata(experiment)$regions$tValue/resultsRevised)
summary(metadata(experiment)$regions$tValue/metadata(experiment)$regions$modtValueFromBioVar)
nStar <- metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"]
kStar <- metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"]
tauSquare <- metadata(experiment)$modtInfo[,"withinSS"]/metadata(experiment)$modtInfo[,"withinDF"]
#sigmaSquare <- metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"]
sigmaSquare <- modBioVar$var.post
#Go through each region, recalculate the standard error (assumes lm), get the new t statistic.
#The size of the regression model or number of coefficients (p) has already been subtracted off
#from withinDF by getSingleRegionEffect(). Thus, the p doesn't need to be accounted for below.
nStar <- metadata(experiment)$modtInfo[,"withinDF"] + metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"] + 1
kStar <- metadata(experiment)$modtInfo[,"betweenDF"] + metadata(experiment)$modtInfo[,"modBioVarPriorDF"] + 1
tauSquare <- metadata(experiment)$modtInfo[,"withinSS"]/metadata(experiment)$modtInfo[,"withinDF"]
#sigmaSquare <- metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"]
sigmaSquare <- modBioVar$var.post
newResidVar <- ((nStar - kStar)/(nStar - 1))*tauSquare + ((kStar - 1)/(nStar - 1))*sigmaSquare #Number of regression coefficients, p, already accounted for by "withinDF" above.
newResidVar <- ((nStar - kStar)/(nStar))*tauSquare + ((kStar)/(nStar))*sigmaSquare
#Record the sqrt(var.hat(y))/sqrt(var.hat*(y)) where var.hat(y) is the original estimate of the variance
#of y (or the total error in the regression model) and var.hat*(y) is the posterior estimate of this
#variance after shrinking the biological variance.
changeInSE <- sqrt(newResidVar/originalResidVar)
newSE <- changeInSE*metadata(experiment)$modtInfo[,"betaCoefSE"]
resultsRevised <- metadata(experiment)$modtInfo[,"betaCoef"]/newSE
summary(changeInSE)
summary(metadata(experiment)$regions$tValue/resultsRevised)
metadata(experiment)$modtInfo[,"withinDF"]
region <- metadata(experiment)$regions
#Grab the candidate region's corresponding counts.
regionBinIndices <- metadata(experiment)$regionsBins[region$index,"startBin"]:metadata(experiment)$regionsBins[region$index,"endBin"]
region <- metadata(experiment)$regions[1]
#Grab the candidate region's corresponding counts.
regionBinIndices <- metadata(experiment)$regionsBins[region$index,"startBin"]:metadata(experiment)$regionsBins[region$index,"endBin"]
if(!is.null(metadata(experiment)$transformedCounts)){
regionDat <- metadata(experiment)$transformedCounts[regionBinIndices,,drop=F] #drop=F maintains matrix format when only grabbing one bin
}
rownames(regionDat) <- regionBinIndices
colnames(regionDat) <- paste("Sample", 1:ncol(regionDat))
#Need to reshape data into long format with columns: count, bin, condition, block, other covariatess
regionDatLong <- melt(regionDat) #Lists all counts from first sample, then second, etc.
colnames(regionDatLong) <- c("bin", "sample", "count")
#Add the other variables.
regionDatLong$expCondition <- as.factor(rep(colData(experiment)[,metadata(experiment)$expCondition], each=nrow(regionDat)))
if(!is.null(metadata(experiment)$block)){
regionDatLong$block <- as.factor(rep(colData(experiment)[,metadata(experiment)$block], each=nrow(regionDat)))
}
if(!is.null(metadata(experiment)$covariates)){
regionDatLong[,metadata(experiment)$covariates] <- as.matrix(rep(colData(experiment)[,metadata(experiment)$covariates], each=nrow(regionDat)))
}
#Relevel experimental condition to ensure consistency with region-finding treatment effect estimate.
regionDatLong$expCondition <- relevel(regionDatLong$expCondition, ref=toString(unique(colData(experiment)[,metadata(experiment)$expCondition])[1]))
#Convert sample to factor.
regionDatLong$sample <- as.factor(regionDatLong$sample)
formula <- paste("count ~ factor(bin) + block + expCondition + ", paste(metadata(experiment)$covariates, collapse=" + "), " - 1",sep = "")
formula <- as.formula(gsub("+  -", "-", formula, fixed=T)) #In case there are no additional covariates to include
#fit <- gls(formula, data=regionDatLong, correlation = corAR1(form = ~bin|sample), control = list(returnObject=T))
fit <- lm(formula, data=regionDatLong)
fit.gls <- fit
#Record information for obtaining moderated t statistics as done in limma
#https://www.degruyter.com/view/journals/sagmb/6/1/article-sagmb.2007.6.1.1252.xml.xml
expConditionCoef <- grep("expCondition", names(fit.gls$coefficients), value=T)
residDF <- nrow(regionDatLong) - length(coefficients(fit.gls))
residSE <- summary(fit.gls)$sigma #For some reason, not equal to sqrt(sum(fit.gls$residuals^2)/residDF) but close (for lm it is).
#Revert the following code when done with lm() rather than gls()
#betaCoef <- summary(fit.gls)$tTable[expConditionCoef,c("Value")]
betaCoef <- summary(fit.gls)$coefficients[expConditionCoef,c("Estimate")]
#betaCoefSE <- summary(fit.gls)$tTable[expConditionCoef,c("Std.Error")]
betaCoefSE <- summary(fit.gls)$coefficients[expConditionCoef,c("Std. Error")]
#Revert the following code when done with lm() rather than gls()
#Extract the t-value for the effect associated with the experimental condition.
#expConditionEffect <- summary(fit.gls)$tTable[expConditionCoef,c("t-value")]
expConditionEffect <- summary(fit.gls)$coefficients[expConditionCoef,c("t value")]
#anova(fit.gls) would return sequential sum of squares, at least when using lm. Don't want that.
#Want sum of squares within and across samples, based on residuals (e.g. after fitting model).
residDataFrame <- data.frame(regResiduals=resid(fit.gls), sample=regionDatLong$sample, block=regionDatLong$block)
anovaResults <- aov(regResiduals ~ sample, data=residDataFrame) #The "Residuals" column in this output refers to residuals from ANOVA, not from the regression.
withinSS <- summary(anovaResults)[[1]]["Residuals","Sum Sq"]
withinDF <- summary(anovaResults)[[1]]["Residuals","Df"] - length(coef(fit)) #Subtract off number of coefficients in model
betweenSS <- summary(anovaResults)[[1]]["sample","Sum Sq"]
betweenDF <- summary(anovaResults)[[1]]["sample","Df"]
anovaResults
summary(fit)
withinSS
withinDF
betweenDF
metadata(experiment)$modtInfo[,"betweenDF"]
mean(modBioVar$var.post)
summary(changeInSE)
rm(list=ls())
#Testing out package with 6 vs 6 experiment.
load("/homes6/mquinn/chipseqRScripts/data_peaks_simulated_DB_GSE68952.rda")
load("/homes6/mquinn/chipseqRScripts/permutation_test_balanced_results_simulated_DB_GSE68952.rda")
candidateRegions <- metadata(experiment)$regions
cell_line <- factor(c(1,2,3,4,5,6,1,2,3,4,5,6))
candidateRegions <- metadata(experiment)$regions
cell_line <- factor(c(1,2,3,4,5,6,1,2,3,4,5,6))
status <- factor(c(rep("Control",6), rep("Simulated",6)))
status <- relevel(status, ref=toString(unique(status)[1]))
#fakeVar1 <- c(1.25, 1.50, 1.75, 2.00, 2.25, 2.50, 2.00, 2.75, 3.00, 3.25, 3.50, 3.00)
#fakeVar2 <- c(0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0)
sampleSheet <- data.frame(cbind(cell_line, status))
blacklist <- read.table('/homes6/mquinn/chipseqRScripts/hg19-blacklist.v2.bed',
header=FALSE,sep='\t',stringsAsFactors=F)
blacklist <- GRanges(blacklist$V1,IRanges(blacklist$V2,blacklist$V3),group=blacklist$V4)
library(permBind)
experiment <- formatExperiment(assay=simDat, rowRanges=rowRanges(data),
sampleSheet=sampleSheet, blacklist=blacklist,
expCondition = "status", block = "cell_line")
#Using lower=0.25 matches candidateRegions from previous script, gives about 16000 regions.
experiment <- getRegions(experiment, lower=0.25, upper=0.75, thresholdType="percentile", minWidth = median(width(rowRanges(experiment))) + 1, maxGap=600)
experiment <- transformCounts(experiment)
permutations <- getPermutations(experiment, permutationType = "balanced", numCores = 1)
permutations <- permutations[1:4,]
permutations
system.time({
experiment4 <- permutationTest(experiment, permutations, effectType="two-sided", includeBetas = T, numCores = 4, verbose = T)
})
library(limma)
system.time({
experiment4 <- permutationTest(experiment, permutations, effectType="two-sided", includeBetas = T, numCores = 4, verbose = T)
})
metadata(experiment4)$regions
experiment
permutations
permutations <- permutations[1:3,]
effectType = "two-tailed"
includeBetas <- T
verbose <- T
#Perform the permutation test, iterating over permutations.
nullBetas <- nulltValues <- nullModtValues <- nullModtValuesFromBioVar <- list()
i = 1
#Copy over the experiment, permute the counts.
experimentPerm <- experiment
assay(experimentPerm) <- assay(experiment)[,permutations[i,]]
if(!is.null(metadata(experiment)$transformedCounts)){
metadata(experimentPerm)$transformedCounts <- metadata(experimentPerm)$transformedCounts[,permutations[i,]]
}
#Get new candidate regions using the same parameters as the observed results, get the corresponding null results.
experimentPerm <- getRegions(experimentPerm, lower=metadata(experiment)$lower, upper = metadata(experiment)$upper,
thresholdType = metadata(experiment)$thresholdType, minWidth = metadata(experiment)$minWidth,
maxGap = metadata(experiment)$maxGap)
experimentPerm <- getObservedResults(experimentPerm, includeBetas = includeBetas, numCores = numCores, clusterExists = clusterExists, verbose = verbose)
numCores <- 1
experimentPerm <- getObservedResults(experimentPerm, includeBetas = includeBetas, numCores = numCores, clusterExists = clusterExists, verbose = verbose)
clusterExists <- F
experimentPerm <- getObservedResults(experimentPerm, includeBetas = includeBetas, numCores = numCores, clusterExists = clusterExists, verbose = verbose)
#Append the results to those already obtained.
nulltValues[[i]] <- metadata(experimentPerm)$regions$tValue
nullModtValues[[i]] <- metadata(experimentPerm)$regions$modtValue
nullModtValuesFromBioVar[[i]] <- metadata(experimentPerm)$regions$modtValueFromBioVar
if(includeBetas){
nullBetas[[i]] <- metadata(experimentPerm)$regions$beta
}
nullModtValuesFromBioVar[[1]]
i=2
#Copy over the experiment, permute the counts.
experimentPerm <- experiment
assay(experimentPerm) <- assay(experiment)[,permutations[i,]]
if(!is.null(metadata(experiment)$transformedCounts)){
metadata(experimentPerm)$transformedCounts <- metadata(experimentPerm)$transformedCounts[,permutations[i,]]
}
#Get new candidate regions using the same parameters as the observed results, get the corresponding null results.
experimentPerm <- getRegions(experimentPerm, lower=metadata(experiment)$lower, upper = metadata(experiment)$upper,
thresholdType = metadata(experiment)$thresholdType, minWidth = metadata(experiment)$minWidth,
maxGap = metadata(experiment)$maxGap)
experimentPerm <- getObservedResults(experimentPerm, includeBetas = includeBetas, numCores = numCores, clusterExists = clusterExists, verbose = verbose)
#Append the results to those already obtained.
nulltValues[[i]] <- metadata(experimentPerm)$regions$tValue
nullModtValues[[i]] <- metadata(experimentPerm)$regions$modtValue
nullModtValuesFromBioVar[[i]] <- metadata(experimentPerm)$regions$modtValueFromBioVar
if(includeBetas){
nullBetas[[i]] <- metadata(experimentPerm)$regions$beta
}
nullModtValuesFromBioVar[[2]]
#Reformat into vectors
nulltValues <- unlist(nulltValues)
nullModtValues <- unlist(nullModtValues)
nullModtValuesFromBioVar <- unlist(nullModtValuesFromBioVar)
nullModtValuesFromBioVar
if(includeBetas){
nullBetas <- unlist(nullBetas)
}
if(verbose){
message(sum(missing), " out of ", length(nulltValues) ," null models failed to fit and are being excluded from analysis.")
}
message(sum(missing), " out of ", length(nulltValues) ," null models failed to fit and are being excluded from analysis.")
length(nulltValues)
#Report NA values (arise due to failure in generalized least squares fit).
missing <- is.na(nulltValues)
sum(missing)
#Remove missing values.
nulltValues <- nulltValues[!missing]
nullModtValues <- nullModtValues[!missing]
nullModtValuesFromBioVar <- nullModtValuesFromBioVar[!missing]
if(includeBetas){
nullBetas <- nullBetas[!missing]
}
#Obtain the p-values and FDRs for beta coefficients, for t values, and for moderated t values
if(includeBetas){
elementMetadata(metadata(experiment)$regions)[["betaPValue"]] <- sapply(metadata(experiment)$regions$beta, FUN=findPermPValue, nullValues=nullBetas, effectType = effectType)
elementMetadata(metadata(experiment)$regions)[["betaFDR"]] <- p.adjust(metadata(experiment)$regions$betaPValue, method="BH")
}
metadata(experiment)$regions$beta
metadata(experiment)$regions$tValue
metadat(experiment)
metadata(experiment)
metadat(experiment)$regions
metadata(experiment)$regions
experiment <- getObservedResults(experiment, includeBetas = includeBetas, numCores = numCores, clusterExists = clusterExists, verbose = verbose)
#Obtain the p-values and FDRs for beta coefficients, for t values, and for moderated t values
if(includeBetas){
elementMetadata(metadata(experiment)$regions)[["betaPValue"]] <- sapply(metadata(experiment)$regions$beta, FUN=findPermPValue, nullValues=nullBetas, effectType = effectType)
elementMetadata(metadata(experiment)$regions)[["betaFDR"]] <- p.adjust(metadata(experiment)$regions$betaPValue, method="BH")
}
effectType <- "two-sided"
#Obtain the p-values and FDRs for beta coefficients, for t values, and for moderated t values
if(includeBetas){
elementMetadata(metadata(experiment)$regions)[["betaPValue"]] <- sapply(metadata(experiment)$regions$beta, FUN=findPermPValue, nullValues=nullBetas, effectType = effectType)
elementMetadata(metadata(experiment)$regions)[["betaFDR"]] <- p.adjust(metadata(experiment)$regions$betaPValue, method="BH")
}
elementMetadata(metadata(experiment)$regions)[["betaPValue"]]
elementMetadata(metadata(experiment)$regions)[["tPValue"]] <- sapply(metadata(experiment)$regions$tValue, FUN=findPermPValue, nullValues=nulltValues, effectType = effectType)
elementMetadata(metadata(experiment)$regions)[["tFDR"]] <- p.adjust(metadata(experiment)$regions$tPValue, method="BH")
elementMetadata(metadata(experiment)$regions)[["modtPValue"]] <- sapply(metadata(experiment)$regions$modtValue, FUN=findPermPValue, nullValues=nullModtValues, effectType = effectType)
elementMetadata(metadata(experiment)$regions)[["modtFDR"]] <- p.adjust(metadata(experiment)$regions$modtPValue, method="BH")
#Revert the following code when done with lm() rather than gls()
message("Calculating permutation p-values and FDRs for moderated t statistics based on shrinking biological variance. NAs will be ignored in the calculations.")
which(is.na(nullModtValuesFromBioVar) | is.nan(nullModtValuesFromBioVar)
)
missing <- which(is.na(nullModtValuesFromBioVar) | is.nan(nullModtValuesFromBioVar))
message("Ignoring", length(missing), "NA or NaNs null values.")
message("Ignoring ", length(missing), " NA or NaNs null values.")
sapply(metadata(experiment)$regions$modtValueFromBioVar, FUN=findPermPValue, nullValues=nullModtValuesFromBioVar, effectType = effectType, ignoreNAs = T)
nullValues=nullModtValuesFromBioVar
nullValues
metadata(experiment)$regions$modtValueFromBioVar
nullValues
metadata(experiment)$regions$modtValueFromBioVar
metadata(experiment)$regions$modtValueFromBioVar[1]
sum(1.28>abs(nullModtValuesFromBioVar))/length(nullModtValuesFromBioVar)
obsValue <-  metadata(experiment)$regions$modtValueFromBioVar[1]
nullValues
missing <- which(is.na(nullValues) | is.nan(nullValues))
missing
#message("Ignoring", length(missing), "NA or NaNs null values.")
nullValues <- nullValues[-missing]
nullValues
length(missing)
length(missing) > 0
nullValues=nullModtValuesFromBioVar
sum(abs(nullValues) >= abs(obsValue))/length(nullValues)
roxygen2::roxygenise()
rm(list=ls())
library(permBind)
#Testing out package with 6 vs 6 experiment.
load("/homes6/mquinn/chipseqRScripts/data_peaks_simulated_DB_GSE68952.rda")
load("/homes6/mquinn/chipseqRScripts/permutation_test_balanced_results_simulated_DB_GSE68952.rda")
candidateRegions <- metadata(experiment)$regions
cell_line <- factor(c(1,2,3,4,5,6,1,2,3,4,5,6))
status <- factor(c(rep("Control",6), rep("Simulated",6)))
status <- relevel(status, ref=toString(unique(status)[1]))
#fakeVar1 <- c(1.25, 1.50, 1.75, 2.00, 2.25, 2.50, 2.00, 2.75, 3.00, 3.25, 3.50, 3.00)
#fakeVar2 <- c(0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0)
sampleSheet <- data.frame(cbind(cell_line, status))
blacklist <- read.table('/homes6/mquinn/chipseqRScripts/hg19-blacklist.v2.bed',
header=FALSE,sep='\t',stringsAsFactors=F)
blacklist <- GRanges(blacklist$V1,IRanges(blacklist$V2,blacklist$V3),group=blacklist$V4)
library(permBind)
experiment <- formatExperiment(assay=simDat, rowRanges=rowRanges(data),
sampleSheet=sampleSheet, blacklist=blacklist,
expCondition = "status", block = "cell_line")
#Using lower=0.25 matches candidateRegions from previous script, gives about 16000 regions.
experiment <- getRegions(experiment, lower=0.25, upper=0.75, thresholdType="percentile", minWidth = median(width(rowRanges(experiment))) + 1, maxGap=600)
rm(list=ls())
library(permBind)
#Testing out package with 6 vs 6 experiment.
load("/homes6/mquinn/chipseqRScripts/data_peaks_simulated_DB_GSE68952.rda")
load("/homes6/mquinn/chipseqRScripts/permutation_test_balanced_results_simulated_DB_GSE68952.rda")
candidateRegions <- metadata(experiment)$regions
cell_line <- factor(c(1,2,3,4,5,6,1,2,3,4,5,6))
status <- factor(c(rep("Control",6), rep("Simulated",6)))
status <- relevel(status, ref=toString(unique(status)[1]))
#fakeVar1 <- c(1.25, 1.50, 1.75, 2.00, 2.25, 2.50, 2.00, 2.75, 3.00, 3.25, 3.50, 3.00)
#fakeVar2 <- c(0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0)
sampleSheet <- data.frame(cbind(cell_line, status))
blacklist <- read.table('/homes6/mquinn/chipseqRScripts/hg19-blacklist.v2.bed',
header=FALSE,sep='\t',stringsAsFactors=F)
blacklist <- GRanges(blacklist$V1,IRanges(blacklist$V2,blacklist$V3),group=blacklist$V4)
library(permBind)
experiment <- formatExperiment(assay=simDat, rowRanges=rowRanges(data),
sampleSheet=sampleSheet, blacklist=blacklist,
expCondition = "status", block = "cell_line")
#Using lower=0.25 matches candidateRegions from previous script, gives about 16000 regions.
experiment <- getRegions(experiment, lower=0.25, upper=0.75, thresholdType="percentile", minWidth = median(width(rowRanges(experiment))) + 1, maxGap=600)
experiment <- transformCounts(experiment)
permutations <- getPermutations(experiment, permutationType = "balanced", numCores = 1)
permutations <- permutations[1:3,]
permutations
system.time({
experiment4 <- permutationTest(experiment, permutations, effectType="two-sided", includeBetas = T, numCores = 4, verbose = T)
})
metadata(experiment4)$regions
#Testing out package with 6 vs 6 experiment.
load("/homes6/mquinn/chipseqRScripts/data_peaks_simulated_DB_GSE68952.rda")
load("/homes6/mquinn/chipseqRScripts/permutation_test_balanced_results_simulated_DB_GSE68952.rda")
candidateRegions <- metadata(experiment)$regions
cell_line <- factor(c(1,2,3,4,5,6,1,2,3,4,5,6))
status <- factor(c(rep("Control",6), rep("Simulated",6)))
status <- relevel(status, ref=toString(unique(status)[1]))
#fakeVar1 <- c(1.25, 1.50, 1.75, 2.00, 2.25, 2.50, 2.00, 2.75, 3.00, 3.25, 3.50, 3.00)
#fakeVar2 <- c(0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0)
sampleSheet <- data.frame(cbind(cell_line, status))
blacklist <- read.table('/homes6/mquinn/chipseqRScripts/hg19-blacklist.v2.bed',
header=FALSE,sep='\t',stringsAsFactors=F)
blacklist <- GRanges(blacklist$V1,IRanges(blacklist$V2,blacklist$V3),group=blacklist$V4)
library(permBind)
experiment <- formatExperiment(assay=simDat, rowRanges=rowRanges(data),
sampleSheet=sampleSheet, blacklist=blacklist,
expCondition = "status", block = "cell_line")
#Using lower=0.25 matches candidateRegions from previous script, gives about 16000 regions.
experiment <- getRegions(experiment, lower=0.25, upper=0.75, thresholdType="percentile", minWidth = median(width(rowRanges(experiment))) + 1, maxGap=600)
experiment <- transformCounts(experiment)
permutations <- getPermutations(experiment, permutationType = "balanced", numCores = 1)
#Shrink the biological variance
modBioVar <- squeezeVar(var=metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"],
df = metadata(experiment)$modtInfo[,"betweenDF"])
library(limma)
#Shrink the biological variance
modBioVar <- squeezeVar(var=metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"],
df = metadata(experiment)$modtInfo[,"betweenDF"])
metadata(experiment)$modtInfo
experiment <- getObservedResults(experiment, verbose=T, includeBetas = T)
#Shrink the biological variance
modBioVar <- squeezeVar(var=metadata(experiment)$modtInfo[,"betweenSS"]/metadata(experiment)$modtInfo[,"betweenDF"],
df = metadata(experiment)$modtInfo[,"betweenDF"])
modtInfo <- cbind(metadata(experiment)$modtInfo,
rep(modBioVar$df.prior, nrow(metadata(experiment)$modtInfo)),
modBioVar$var.post)
colnames(modtInfo) <-  c(colnames(metadata(experiment)$modtInfo), "modBioVarPriorDF", "modBioVar")
metadata(experiment)$modtInfo[,"modBioVarPriorDF"]
colnames(modtInfo) <-  c(colnames(metadata(experiment)$modtInfo), "modBioVarPriorDF", "modBioVar")
metadata(experiment)$modtInfo <- modtInfo #Temporary
metadata(experiment)$modtInfo[,"modBioVarPriorDF"]
